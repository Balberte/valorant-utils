{"version":3,"sources":["components/Team.js","components/TeamGenerator.js","App.js","serviceWorker.js","index.js","valorant-logo.png","valorant-title-logo.png"],"names":["Team","props","Fragment","className","number","players","map","player","key","id","name","TeamGenerator","state","playerCount","playerList","team1","team2","this","playerInput","value","push","setState","focus","array","i","length","newArray","j","Math","floor","random","temp","assignPlayersToTeams","addToTeam1","shuffleArray","includes","Button","variant","color","onClick","generateTeams","type","placeholder","ref","input","onFocus","savePlayer","Component","App","src","logo1","alt","logo2","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.ef72da01.chunk.js","sourcesContent":["import React from 'react';\n\nconst Team = (props) => {\n        return (\n            <React.Fragment>\n                <div className=\"Team\">\n                    <h2>Team {props.number}</h2>\n                    <ul>\n                        {props.players.map(player => <li key={player.id}>{player.name}</li>) }\n                    </ul>\n                </div>\n            </React.Fragment>        \n        )    \n}\n\nexport default Team;","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport Team from './Team';\n\n\nclass TeamGenerator extends Component {\n\n    state = {\n        playerCount: 0,        \n        playerList : [],\n        team1 : [],\n        team2 : []\n    }\n\n    savePlayer(){\n        const players = this.state.playerList;\n\n        if(this.playerInput.value !== \"\"){\n            players.push({\n                \"id\": this.state.playerCount + 1,\n                \"name\": this.playerInput.value\n            });\n            \n            this.setState({ playerList : players, playerCount: this.state.playerCount + 1 });\n        }\n        \n        this.playerInput.focus();\n    }\n\n    shuffleArray(array) {\n        let i = array.length - 1;\n        const newArray = [...array];\n        for (; i > 0; i--) {\n          const j = Math.floor(Math.random() * (i + 1));\n          const temp = newArray[i];\n          newArray[i] = newArray[j];\n          newArray[j] = temp;\n        }\n        return newArray;\n    }\n\n    async generateTeams(){\n        //Clearing teams from state before assign players again\n        await this.setState(\n            {\n                team1 : [],\n                team2 : []\n            }\n        );\n        this.assignPlayersToTeams();\n    }\n\n    assignPlayersToTeams(){\n        \n        let addToTeam1 = true;\n        let team1 = this.state.team1;\n        let team2 = this.state.team2;\n        const suffledPlayerList = this.shuffleArray(this.state.playerList);\n\n        suffledPlayerList.map(player => {\n            if(addToTeam1){\n                if(!this.state.team1.includes(player)){\n                    team1.push(player);\n                }\n            }else{\n                if(!this.state.team2.includes(player)){\n                    team2.push(player); \n                }\n            }\n            addToTeam1 = !addToTeam1;\n        });\n\n        this.setState({team1 : team1});\n        this.setState({team2 : team2});\n    }\n\n    render(){\n        return (\n            <React.Fragment>\n                <div className=\"Team-generator\">\n                    <div className=\"Player-list\">\n                    <Button variant=\"outlined\" color=\"secondary\" className=\"Generate-teams\" onClick={() => this.generateTeams()}\n                    > Generate Teams</Button>\n\n                        <div className=\"Add-player-wrapper\">\n                            <input className=\"Player-input\" type=\"text\" placeholder=\"Add player name\"\n                            ref={input => this.playerInput = input} \n                            onFocus = {() => this.playerInput.value = \"\"} />\n                            <Button variant=\"outlined\" color=\"secondary\" className=\"Save-Player\" onClick={() => this.savePlayer()}>Add</Button>\n                        </div>\n                        <ul>\n                            { this.state.playerList.map(player => <li key={player.id}>{player.name}</li>) }\n                        </ul>\n                    </div>\n                </div>\n                \n                { this.state.team1.length > 0 && \n                    <Team players={this.state.team1} number=\"1\"/> }\n\n                {  this.state.team2.length > 0 && \n                    <Team players={this.state.team2} number=\"2\"/> }\n\n            </React.Fragment>\n        )\n    }\n}\n\nexport default TeamGenerator;","import React from 'react';\nimport logo1 from './valorant-logo.png';\nimport logo2 from './valorant-title-logo.png';\nimport './App.css';\nimport TeamGenerator from './components/TeamGenerator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-logo-wrapper\">\n        <img src={logo1} className=\"App-logo1\" alt=\"logo1\" />\n        <img src={logo2} className=\"App-logo2\" alt=\"logo2\" />\n      </div>\n      \n      <header className=\"App-header\">\n        \n        \n        <TeamGenerator/>\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/valorant-logo.04e02c9b.png\";","module.exports = __webpack_public_path__ + \"static/media/valorant-title-logo.6bd698a7.png\";"],"sourceRoot":""}